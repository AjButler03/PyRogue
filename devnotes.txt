Why am I doing this? In the spring semester of 2025 I built a rogue-like game as a series of assignments for a programming course at Iowa State University. 
The original was built in C/C++, and had many unoptimized / poorly written aspects to it. Regardless, I was proud of having built it from scratch myself. The goal of this project is to build (roughly) the same game, but written in Python.
My reasons for doing this:
    A) I think it is easier to showcase and run python code to people, making it a better showpiece.
    B) I want to gain more experience programming full projects in python, given that it is decently widely used.
    C) Re-building the game allows me to implement optimizations and choice changes that I believe are 'better'.
    D) This code can't easily be used to solve the original asssignments that were meant to be in C++.
On point A in particular, I want this code to only rely on Python itself to be runable. In doing so, it is easily shared and ran by whoever would want to play the game or see how it works.


v0.01; basic dungeon generation
    - The rock generation algorithm is a little too 'clean' in my opinion, which results in very boring corridors between rooms.
    - I might just switch to completely randomized rock hardness values to give a more natural, randomized look to corridors.
v0.03; randomized monsters + turnloop
    - Monster attributes are a bitfield; this is a holdover from my C++ version of this, and I'm not sure it really makes sense to do it this way in python. A basic boolean for each would probably be better in python.
    - Pass attribute is maybe implemented, although I didn't test it. It's one of the 'extra' attributes that I might activate later.
v0.04; Tkinter UI interface
    - This is where things start to differ from my C++ version far more significantly, because I want the window to be dynamcially scaleable. So, at any given point in time, there needs to be the option for the event handlers to run; this means stuff has to operate asynchronously, or have delays built in to allow Tkinter to do it's thing. Makes life a little more difficult than just blatantly rendering.
    - Another complication: using tkinter instead of Curses means I have to come up with some sort of screen unit instead of just characters. The benefit, though, is that I'm able to scale things as I want, and also means that dungeon tiles are square instead of being taller than they are wide.
v0.05; Main Menu + some sub-menus
    - Creating a main menu for the basic state that PyRogue exists in currently is purhaps strange; but it will allow me to test different dungeon size / difficulty settings w/o changing them in code as well as reading predefined monster / item descriptions wihout having to actually see the monsters / items in game.
    - Having one window dynamically scale was difficult on its own, so having multiple is even more complicated. So, the main menu code is going to be separate from the game code, so that things like input handlers will be more specific to what is currently being done. This also works in terms of OOP; if the user wants to start a game, or a new game after completing one, a new game object is made.
    - The main menu being offcenter is 100% an aestetic choice to look like old Valve main menus (like 1998 Half Life), and not because I didn't want to put in the work to center it. 100%.